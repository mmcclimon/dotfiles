#+TITLE: Emacs config
#+AUTHOR: Michael McClimon
#+EMAIL: michael@mcclimon.org
#+OPTIONS: toc:3

* Emacs Config

  This is a test of trying to keep my Emacs config in org mode, because
  obviously I need some new way to procrastinate.


* Packages

  This sections deals with all of the external packages I want.

  First, we'll add the repos and initialize everything.

#+BEGIN_SRC emacs-lisp

(require 'package)

(add-to-list 'package-archives
         '("marmalade" . "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
         '("melpa" . "http://melpa.milkbox.net/packages/"))
(package-initialize)

#+END_SRC

  The variable =required-packages= lists everything I want.

#+BEGIN_SRC emacs-lisp

(defvar required-packages
  '(fill-column-indicator
    sublime-themes
    neotree
    paredit
    avy
    evil
    evil-leader
    evil-surround
    ledger-mode
    magit
    auctex
    yasnippet
    delight
    web-mode))

#+END_SRC

  This function runs through all of the required packages and installs them if
  they're missing.

#+BEGIN_SRC emacs-lisp

(defun required-packages-installed-p (packages)
  "Check if all required packages are installed"
  (let ((rest (cdr packages)))
    (if (package-installed-p (car packages))
        (if (eq rest nil) t (required-packages-installed-p rest))
      nil)))

(unless (required-packages-installed-p required-packages)
  (message "%s" "Installing required packages...")
  (package-refresh-contents)
  (dolist (pkg required-packages)
    (when (not (package-installed-p pkg))
      (package-install pkg)))
  (message "%s" "Packages installed"))

#+END_SRC



* UI settings

  This contains all of the miscellaneous settings for the look and feel of
  Emacs.

** Packages

   Load up the packages we're gonna need.

#+BEGIN_SRC emacs-lisp

(require 'fill-column-indicator)
(add-to-list 'load-path "~/.emacs.d/lisp")
(autoload 'mto-mode "mto-mode" "Minor mode for MTO typesetting" t)


#+END_SRC

** Misc. settings

A bunch of random settings for what the window looks like, get rid of some
annoying default behavior.

#+BEGIN_SRC emacs-lisp

    (progn
      (column-number-mode t)                ; show column in mode line
      (line-number-mode t)                  ; show line numbers too
      (menu-bar-mode 1)                     ; show menus
      (tool-bar-mode -1)                    ; don't show toolbar
      (scroll-bar-mode -1)                  ; don't use scrollbars
      (show-paren-mode 1)                   ; flash parens
      (fci-mode 1)                          ; column ruler
      (ido-mode))                           ; better buffer switching

    (setq inhibit-startup-message t         ; no splash screen
          vc-follow-symlinks t              ; don't ask about symlinks
          echo-keystrokes 0.1               ; show in-progress keystrokes
          ido-enable-flex-matching t        ; better fuzzy matchin
          ns-pop-up-frames nil              ; open new files in existing frame
          frame-title-format "%b")          ; buffer name in title bar

    ; mode line
    (setq display-time-format "  %d-%b"
          display-time-mail-string ""
          display-time-default-load-average nil)
    (display-time-mode 1)

    ; clean up lighters of modes that are always on.
    (require 'delight)
    (delight '((undo-tree-mode)
               (auto-fill-function " â†©" )
               (abbrev-mode " ." )))

    (defalias 'yes-or-no-p 'y-or-n-p)       ; don't make me type "yes"
#+END_SRC

** Colors

    I like the base16-default colors, /mostly/. Here we'll patch the bits I
    don't like. (If it's done via the customize interface, if I switch themes
    later the customized bits hang around, which is really annoying.)

#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

  (defun load-base16-default ()
    (interactive)
    (mapcar #'disable-theme custom-enabled-themes)    ; clear old theme out
    (load-theme 'base16-default t)
    (custom-theme-set-faces                           ; patch this one
     'base16-default

     ;; font-lock faces
     '(font-lock-comment-face ((t (:foreground "#b0b0b0"))))
     '(font-lock-constant-face ((t (:foreground "#90a959"))))
     '(font-lock-function-name-face ((t (:foreground "#6a9fb5"))))
     '(font-lock-keyword-face ((t (:foreground "#aa759f"))))
     '(font-lock-string-face ((t (:foreground "#90a959"))))
     '(font-lock-type-face ((t (:foreground "#f4bf75"))))
     '(font-lock-variable-name-face ((t (:foreground "#ac4142"))))
     '(font-lock-warning-face ((t (:foreground "#ac4142"))))

     ;; everything else
     '(cperl-hash-face ((t (:inherit font-lock-variable-name-face))))
     '(cperl-array-face ((t (:inherit font-lock-variable-name-face))))
     '(cperl-nonoverridable-face ((t (:inherit font-lock-keyword-face))))
     '(flyspell-duplicate ((t (:underline (:color "chartreuse4" :style wave)))))
     '(flyspell-incorrect ((t (:underline (:color "red" :style wave)))))
     '(font-latex-italic-face ((t (:inherit italic))))
     '(font-latex-sectioning-5-face ((t (:inherit font-lock-variable-name-face :weight bold))))
     '(font-latex-sedate-face ((t (:foreground "#8899aa"))))
     '(font-latex-string-face ((t (:inherit font-lock-doc-string-face))))
     '(font-latex-subscript-face ((t nil)))
     '(fringe ((t (:background "#202020"))))
     '(ido-subdir ((t (:foreground "DarkSeaGreen4"))))
     '(ido-subdir ((t (:foreground "DarkSeaGreen4"))))
     '(ledger-font-auto-xact-face ((t (:inherit font-lock-type-face :weight normal))))
     '(ledger-font-payee-cleared-face ((t (:inherit ledger-font-posting-date-face))))
     '(ledger-font-payee-uncleared-face ((t (:inherit font-lock-warning-face :weight bold))))
     '(ledger-font-pending-face ((t (:inherit ledger-font-payee-uncleared-face :weight bold))))
     '(ledger-font-posting-account-face ((t (:inherit font-lock-function-name-face))))
     '(ledger-font-posting-amount-face ((t (:inherit font-lock-keyword-face))))
     '(ledger-font-posting-date-face ((t (:inherit font-lock-constant-face))))
     '(ledger-occur-xact-face ((t nil)))
     '(ledger-occur-xact-face ((t nil)))
     '(link ((t (:inherit font-lock-function-name-face :underline t))))
     '(link ((t (:inherit font-lock-function-name-face :underline t))))
     '(link-visited ((t (:inherit font-lock-keyword-face :underline t))))
     '(link-visited ((t (:inherit font-lock-keyword-face :underline t))))
     ; '(linum ((t (:background "#202020" :foreground "#707070" :height 0.9))))
     '(linum ((t (:background "#202020" :foreground "#505050" :height 0.9))))
     '(markdown-italic-face ((t (:slant italic))))
     '(minibuffer-prompt ((t (:foreground "#6a9fb5"))))
     '(mode-line ((t (:background "#303030" :foreground "#b0b0b0"))))
     '(mode-line-inactive ((t (:inherit mode-line :background "#202020" :foreground "#505050" :weight light))))
     '(neo-button-face ((t (:inherit link :underline nil))))
     '(org-date ((t (:foreground "#aa759f"))))
     '(org-done ((t (:foreground "#90a959"))))
     '(org-hide ((t (:foreground "#505050"))))
     '(org-link ((t (:foreground "#6a9fb5"))))
     '(org-todo ((t (:foreground "#ac4142"))))
     '(region ((t (:background "#b0b0b0"))))
     '(show-paren-match ((t (:background "#6a9fb5" :foreground "#505050"))))
     '(show-paren-mismatch ((t (:background "#d28445" :foreground "#505050"))))
     '(TeX-fold-folded-face ((t (:foreground "DarkSlateGray4"))))
     '(variable-pitch ((t (:weight light :height 1.3 :family "Source Sans Pro"))))
     '(variable-pitch ((t (:weight light :height 1.3 :family "Source Sans Pro"))))
     '(web-mode-html-entity-face ((t (:inherit font-lock-comment-face))))
     '(whitespace-newline ((t (:foreground "dimgray" :weight normal))))
     '(whitespace-newline ((t (:foreground "dimgray" :weight normal))))
     '(whitespace-space ((t (:foreground "dimgray"))))
     '(whitespace-space ((t (:foreground "dimgray"))))
     '(whitespace-tab ((t (:foreground "dim gray"))))
     '(whitespace-tab ((t (:foreground "dim gray"))))))

(load-base16-default)

#+END_SRC

But occasionally I like to use a light theme (especially if writing text).

#+BEGIN_SRC emacs-lisp

  (defun load-twilight-bright ()
    (interactive)
    (mapcar #'disable-theme custom-enabled-themes)    ; clear old theme out
    (load-theme 'twilight-bright t)
    (custom-theme-set-faces                           ; patch this one
     'twilight-bright
     '(ido-subdir ((t (:foreground "#5f9411"))))
     '(font-latex-italic-face ((t (:inherit italic))))
     '(font-latex-math-face ((t (:inherit font-lock-string-face))))
     '(font-latex-sectioning-5-face ((t (:inherit font-lock-variable-name-face :weight bold))))
     '(font-latex-sedate-face ((t (:foreground "LightSkyBlue3"))))
     '(font-latex-string-face ((t (:inherit font-lock-doc-string-face))))
     '(font-latex-subscript-face ((t nil)))
     '(TeX-fold-folded-face ((t (:foreground "LightPink3"))))
     '(ledger-font-auto-xact-face ((t (:inherit font-lock-type-face :weight normal))))
     '(ledger-font-posting-date-face ((t (:inherit font-lock-constant-face :background "white"))))
     '(ledger-font-payee-cleared-face ((t (:inherit ledger-font-posting-date-face :background "white"))))
     '(ledger-font-payee-uncleared-face ((t (:inherit font-lock-warning-face :weight bold :bacgkround "white"))))
     '(ledger-font-pending-face ((t (:inherit ledger-font-payee-uncleared-face :weight bold :background "white"))))
     '(ledger-font-posting-account-face ((t (:inherit font-lock-variable-name-face :background "white"))))
     '(ledger-font-posting-amount-face ((t (:inherit font-lock-keyword-face :background "white"))))
     '(ledger-occur-xact-face ((t nil)))
     '(ledger-occur-xact-face ((t nil)))
     '(org-block-background ((t (:background "#f9feff"))))))

#+END_SRC

Nice fontification in org-mode files.

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

Set default font for frames.

#+BEGIN_SRC emacs-lisp
(add-to-list
 'default-frame-alist
 '(font . "Input-11"))
#+END_SRC

Add some functions for switching between light and dark themes.

#+BEGIN_SRC emacs-lisp
  (defun dark-theme ()
    (interactive)
    (load-base16-default))

  (defun light-theme ()
    (interactive)
    (load-twilight-bright))
#+END_SRC

** Scrolling

   Emacs scrolling is super bizarre and unintuitive. This makes it more like
   vim's scrolling, which I like and am used to.

#+BEGIN_SRC emacs-lisp

(setq scroll-margin 2                                   ; scroll-off
      scroll-conservatively 9999                        ; don't recenter point
      scroll-step 1                                     ; scroll one line at a time
      mouse-wheel-scroll-amount '(2 ((shift) . 1))      ; one line at a time
      mouse-wheel-progressive-speed nil                 ; don't accelerate
      mouse-wheel-follow-mouse 't)                      ; scroll window under mouse

#+END_SRC

** Backups

Emacs backup system is black magic to me, but these settings seem not to lose
anything, so I might as well keep them.

#+BEGIN_SRC emacs-lisp

(setq backup-by-copying t
      backup-directory-alist '(("." . "~/.emacs.d/backups"))
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)

#+END_SRC

** Better defaults

This is stuff shamelessly ripped off from the better-defaults package, only
without the things I find really annoying

#+BEGIN_SRC emacs-lisp
(progn
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
  (require 'saveplace)
  (setq-default save-place t)
  (setq x-select-enable-clipboard t
        x-select-enable-primary t
        mouse-yank-at-point t
        visible-bell t
        ediff-window-setup-function 'ediff-setup-windows-plain
        save-place-file (concat user-emacs-directory "places")
        backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups")))))
#+END_SRC

** FCI mode

I really like fci-mode, which shows a visual indicator of the fill-column.
It's annoying, though, when the window is small, since it adds long-line
indicators on every line. It's also much more useful in prog-modes than in
text-modes.

First, settings:

#+BEGIN_SRC emacs-lisp
(setq fci-rule-column 80
      fci-rule-color "#444444")
#+END_SRC

This function figures out where fci-mode is useful and maybe turns it on,
along with linum-mode (which shows line numbers)

#+BEGIN_SRC emacs-lisp

(defun conditionally-turn-on-fci-mode ()
  (if (and
       (> (window-total-width) (+ 4 fci-rule-column))
       (derived-mode-p 'prog-mode))
      (progn
        (fci-mode 1)
        (linum-mode 1))
    (progn
      (fci-mode -1)
      (linum-mode -1))))
#+END_SRC

Then we hook into the prog-mode hooks, along with window-resizing functions
and call this every time.

#+BEGIN_SRC emacs-lisp

(add-hook 'prog-mode-hook (lambda () (fci-mode 1)))     ; always start on
(add-hook 'window-configuration-change-hook 'conditionally-turn-on-fci-mode)
(add-hook 'after-make-frame-functions 'conditionally-turn-on-fci-mode)

#+END_SRC



* Text editing

** General

  These are settings for general text-editing things.

#+BEGIN_SRC emacs-lisp

(setq-default tab-always-indent nil             ; tab actually works like a tab key
              require-final-newline 't          ; unix-friendly trailing newline
              tab-width 4                       ; tabs are four spaces
              indent-tabs-mode nil              ; tab works like a tab key
              sentence-end-double-space nil     ; sentences end with one space
              fill-column 78)                   ; good width for default

(add-hook 'before-save-hook 'whitespace-cleanup)    ; no messy space
(add-hook 'text-mode-hook 'turn-on-auto-fill)       ; wrap text

(put 'downcase-region 'disabled nil)            ; why is this turned off?
#+END_SRC

  I want text-wrapping all the time, but only for comments in prog-modes.

#+BEGIN_SRC emacs-lisp
  (defun mjm/auto-fill-comments ()
    (setq-local comment-auto-fill-only-comments t)
    (auto-fill-mode 1))

  (add-hook 'prog-mode-hook 'mjm/auto-fill-comments)
#+END_SRC
** Abbrevs

  Abbrev-mode is really useful since I often screw up typing simple things.

#+BEGIN_SRC emacs-lisp
(setq abbrev-file-name "~/.emacs.d/abbrev_defs"
      save-abbrevs t)
(setq-default abbrev-mode t)
#+END_SRC



* Keybindings

** Global keybindings

These mostly have to do with keys for standard UI bits and modes that are
available everywhere.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "M-z") 'zap-up-to-char)
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
(global-set-key (kbd "C-x C-m") 'execute-extended-command)
(define-key global-map (kbd "RET") 'newline-and-indent)
(define-key global-map (kbd "M-[") 'backward-paragraph)
(define-key global-map (kbd "M-]") 'forward-paragraph)
#+END_SRC

** Mac-specific things

I don't really care for the CUA bindings, but I do like a few of the standard
command-key bindings.

#+BEGIN_SRC emacs-lisp
(setq mac-option-modifier 'meta)
(setq mac-command-modifier 'super)
(global-set-key (kbd "s-m") 'iconify-frame)
(global-set-key (kbd "s-q") 'save-buffers-kill-terminal)
(global-set-key (kbd "s-c") 'evil-yank)
#+END_SRC

** Evil settings

   Emacs is only useful with vim bindings. I tried for a long time to use the
   Emacs bindings, but couldn't remember what magic key sequence did what. Oh
   well.

   First, turn on all of the evil bits.

#+BEGIN_SRC emacs-lisp
(require 'evil)
(require 'evil-surround)
(require 'evil-leader)
(global-evil-leader-mode 1)
(evil-mode 1)
(global-evil-surround-mode 1)
#+END_SRC

   Swap colon/semicolon.

#+BEGIN_SRC emacs-lisp
(define-key evil-normal-state-map ";" 'evil-ex)
(define-key evil-normal-state-map ":" 'evil-repeat-find-char)
#+END_SRC

   Make the evil-mode indicators in the mode line a little nicer.

#+BEGIN_SRC emacs-lisp
  (setq evil-mode-line-format '(before . mode-line-frame-identification))
  (setq evil-normal-state-tag "<N>"   ; no fancy color for normal mode
        evil-emacs-state-tag (concat "<" (propertize "E" 'face '((:foreground "LightSlateBlue"))) ">")
        evil-insert-state-tag (concat "<" (propertize "I" 'face '((:foreground "chartreuse4"))) ">")
        evil-motion-state-tag (concat "<" (propertize "M" 'face '((:foreground "OrangeRed3"))) ">")
        evil-visual-state-tag (concat "<" (propertize "V" 'face '((:foreground "CadetBlue"))) ">")
        evil-operator-state-tag (concat "<" (propertize "O" 'face '((:foreground "sienna"))) ">"))
#+END_SRC

   There are some mode which have reasonable keybings already, so don't use
   evil for those modes.

#+BEGIN_SRC emacs-lisp
(setq evil-emacs-state-modes (append evil-emacs-state-modes
                                     '(neotree-mode
                                       dired-mode
                                       magit-status-mode)))
#+END_SRC

** Visual line mode

   Visual-line-mode is useful for editing HTML files (among other things), but
   plays a little funny with evil. Fix that here. This has to do a little more
   work because I want to unset the modified bindings when visual line mode
   turns off.

#+BEGIN_SRC emacs-lisp
(defun mjm-visual-line-mode-keybindings ()
  "Set up visual line mode bindings"
  (when visual-line-mode
    (define-key evil-normal-state-local-map "j" 'evil-next-visual-line)
    (define-key evil-normal-state-local-map "k" 'evil-previous-visual-line)
    (define-key evil-normal-state-local-map "0" 'evil-beginning-of-visual-line)
    (define-key evil-normal-state-local-map "gj" 'evil-next-line)
    (define-key evil-normal-state-local-map "gk" 'evil-previous-line)
    (define-key evil-normal-state-local-map "g0" 'evil-beginning-of-line))
  (unless visual-line-mode
    (define-key evil-normal-state-local-map "j" nil)
    (define-key evil-normal-state-local-map "k" nil)
    (define-key evil-normal-state-local-map "0" nil)
    (define-key evil-normal-state-local-map "gj" nil)
    (define-key evil-normal-state-local-map "gk" nil)
    (define-key evil-normal-state-local-map "g0" nil)))

(add-hook 'visual-line-mode-hook 'mjm-visual-line-mode-keybindings)
#+END_SRC


*** Evil-rsi

    This takes the non-insane bits from evil-rsi, so that readline bindings
    more-or-less work in insert mode.

#+BEGIN_SRC emacs-lisp
(define-key evil-insert-state-map (kbd "C-a") 'beginning-of-line)
(define-key evil-insert-state-map (kbd "C-b") 'backward-char)
(define-key evil-insert-state-map (kbd "C-d") 'delete-char)
(define-key evil-insert-state-map (kbd "C-e") 'end-of-line)
(define-key evil-insert-state-map (kbd "C-f") 'forward-char)
#+END_SRC

*** Evil-leader bindings

    Use comma as leader, with a bunch of leader bindings.

#+BEGIN_SRC emacs-lisp
(evil-leader/set-leader ",")
(evil-leader/set-key
    "f" 'avy-goto-char)
#+END_SRC

*** Keyboard quitting

    I can't use =C-g= for quitting things, because I like banging on escape
    until something happens. Here we define a function that bails out of
    everything, and bind it to =ESC= in a bunch of different places.

#+BEGIN_SRC emacs-lisp
(defun minibuffer-keyboard-quit ()
  "Abort recursive edit.
In Delete Selection mode, if the mark is active, just deactivate it;
then it takes a second \\[keyboard-quit] to abort the minibuffer."
  (interactive)
  (if (and delete-selection-mode transient-mark-mode mark-active)
      (setq deactivate-mark  t)
    (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
    (abort-recursive-edit)))

(define-key evil-normal-state-map [escape] 'keyboard-quit)
(define-key evil-visual-state-map [escape] 'keyboard-quit)
(define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
(define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
#+END_SRC


* Filetypes

These are all mode-specific settings.

** Ledger

[[http://ledger-cli.org][Ledger]] is software I use to keep track of my finances, and is super useful.

#+BEGIN_SRC emacs-lisp
(defun mjm-ledger-mode-keybindings ()
  "Better keybindings for ledger mode"
  (progn
    (evil-define-key 'normal ledger-mode-map (kbd ",q") 'ledger-post-align-xact)
    (evil-define-key 'normal ledger-mode-map (kbd ",c") 'ledger-toggle-current)
    (evil-define-key 'normal ledger-mode-map (kbd ",p") 'ledger-navigate-prev-xact-or-directive)
    (evil-define-key 'normal ledger-mode-map (kbd ",n") 'ledger-navigate-next-xact-or-directive)))

(add-hook 'ledger-mode-hook 'mjm-ledger-mode-keybindings)
#+END_SRC

** Mail

I don't /really/ write email in emacs so much any more, but these are the
settings I used when I did more often.

#+BEGIN_SRC emacs-lisp
(add-hook 'mail-mode-hook (lambda ()
                            (setq fill-column 72)
                            (turn-on-flyspell)))
(add-to-list 'auto-mode-alist '("\\.eml\\'" . mail-mode))
#+END_SRC

** Markdown

The default "enter" behavior seems to add whitespace more-or-less randomly to
the beginning of the next line. This is slightly better.

#+BEGIN_SRC emacs-lisp
(add-hook 'markdown-mode-hook
          (lambda ()
            (local-set-key (kbd "RET") 'electric-newline-and-maybe-indent)))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
#+END_SRC

** Org

I am, very slowly, attempting to learn org-mode (this document
notwithstanding).

First, use comma-bindings to navigate.

#+BEGIN_SRC emacs-lisp

  (defun mjm-org-mode-keybindings ()
    (evil-define-key 'normal org-mode-map (kbd ",n") 'outline-next-visible-heading)
    (evil-define-key 'normal org-mode-map (kbd ",p") 'outline-previous-visible-heading)
    (evil-define-key 'normal org-mode-map (kbd ",u") 'outline-up-heading)
    (evil-define-key 'normal org-mode-map (kbd ",c") 'org-ctrl-c-ctrl-c))

  (add-hook 'org-mode-hook 'mjm-org-mode-keybindings)

#+END_SRC

** Perl

Cperl mode is better than perl-mode, for reasons I don't really understand.
However, it tries to automatically expand keywords and control structures,
which is really annoying. Because I always have abbrev-mode turned on (for
typo fixes), it does this even when all of the ~cperl-electric~ variables are
turned off.

#+BEGIN_SRC emacs-lisp
  (defalias 'perl-mode 'cperl-mode)
  (setq-default cperl-invalid-face 'default
                cperl-indent-parens-as-block t
                cperl-indent-level tab-width)

  (defun mjm/perl-mode-hook ()
    (abbrev-mode -1))
  (add-hook 'cperl-mode-hook 'mjm/perl-mode-hook)
#+END_SRC
** TeX

Oh man, the default TeX superscript/subscript fontification is /really/ ugly.

#+BEGIN_SRC emacs-lisp
(setq tex-font-script-display '(-0.0 0.0)
      tex-suscript-height-ratio 1.0)
#+END_SRC

RefTeX settings, without which I wouldn't have kept (relatively) sane writing
a dissertation.

#+BEGIN_SRC emacs-lisp
(require 'reftex)
(setq TeX-auto-save t
      TeX-parse-self t
      reftex-plug-into-AUCTeX t)
#+END_SRC

And some general TeX settings. Always ask for the master file, always turn on
reftex and flyspell, and collapse ugly TeX macros.

#+BEGIN_SRC emacs-lisp
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook (lambda()
                             (turn-on-reftex)
                             (turn-on-flyspell)
                             (TeX-fold-mode 1)))
#+END_SRC

These are settings for automatically unfolding and folding TeX buffers. The
buffer is automatically folded (via AucTeX), and then every time point
changes lines, the current paragraph gets unfolded and everything else folds
back up, magically. This took forever to figure out, but will save me
/seconds/ of time, so it's totally worth it.

First, the necessary functions:

#+BEGIN_SRC emacs-lisp
(defun save-line-num-for-folding ()
"Save current line number and point position so we can compare later.

This sets two buffer-local variables, tex-line-num and prev-point-pos."
  (interactive)
  (unless (window-minibuffer-p)
    (setq-local tex-line-num (line-number-at-pos))
    (setq-local prev-point-pos (point))))

(defun unfold-para-around-point ()
  "Unfolds the paragraph around point and folds up where we just left.

This has to do some additional checking because we really don't want to do this
in the minibuffer or refold/unfold if the point hasn't actually changes lines."
  (interactive)
  (unless (window-minibuffer-p)
    (unless (equal tex-line-num (line-number-at-pos))
      (when TeX-unfold-para-around-point
        (save-excursion
          (goto-char prev-point-pos)
          (TeX-fold-paragraph))
        (unless (and (bolp) (eolp))
          (TeX-fold-clearout-paragraph))))))
#+END_SRC

And now, actually set up the hooks when we're in LaTeX-mode. We'll do this via
a function instead of a mess of lambdas.

#+BEGIN_SRC emacs-lisp
(defun add-tex-folding-hooks ()
  (defvar-local tex-line-num 1 "Local variable to save previous line number.")
  (defvar-local prev-point-pos 1 "Local variable to save previous point-position.")
  (defcustom TeX-unfold-para-around-point t
    "Unfold text around the mark, if active."
    :type 'boolean
    :group 'TeX-fold)
  (add-hook 'pre-command-hook 'save-line-num-for-folding nil :local)
  (add-hook 'post-command-hook 'unfold-para-around-point nil :local))

(add-hook 'LaTeX-mode-hook 'add-tex-folding-hooks)
#+END_SRC

** Web mode

Makes PHP files not awful.

#+BEGIN_SRC emacs-lisp
(setq web-mode-enable-html-entities-fontification t)
#+END_SRC


* Processes

This code deals with miscellaneous external processes that interact with Emacs
itself.

** aspell

#+BEGIN_SRC emacs-lisp
(setq-default ispell-program-name "aspell")
(setq ispell-list-command "--list")
#+END_SRC

** Git

Also including some magit config here.

#+BEGIN_SRC emacs-lisp
(setq magit-process-connection-type nil
      magit-git-executable "/usr/local/bin/git")
(global-set-key (kbd "C-c G") 'magit-status)
#+END_SRC



* Final settings

Do these at the very end.

Set up the server last, so that if there's a server already running everything
else gets set up anyway.

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

And get rid of the stupid messages in the minibuffer.

#+BEGIN_SRC emacs-lisp
(message nil)
#+END_SRC

* Custom-set variables

  Add in stuff from =M-x customize=, but only at the very end.


#+BEGIN_SRC emacs-lisp

(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)

#+END_SRC
