" General -----------------------------------------------------{{{
set nocompatible
" }}}
" Vundle ------------------------------------------------------{{{
filetype off                        " required!

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Vundle must manage itself!
Plugin 'gmarik/Vundle.vim'

Plugin 'chriskempson/base16-vim'
Plugin 'bufkill.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'ledger/vim-ledger'
" Plugin 'scrooloose/nerdtree'
" Plugin 'majutsushi/tagbar'
" Plugin 'vim-php/tagbar-phpctags.vim'
" Plugin 'SirVer/ultisnips'
Plugin 'Lokaltog/vim-easymotion'
" Plugin 'jratner/vim-flavored-markdown'
" Plugin 'tpope/vim-fugitive'
Plugin 'pangloss/vim-javascript'
Plugin 'vim-perl/vim-perl'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-rsi'
Plugin 'tpope/vim-surround'

call vundle#end()

filetype plugin indent on           " required!

" }}}
" Text Editing ------------------------------------------------{{{
set backspace=indent,eol,start
set autoindent
set smartindent
set tabstop=4
set shiftwidth=4
set textwidth=78
set expandtab

" }}}
" Abbrevs -----------------------------------------------------{{{
iabbrev teh the
iabbrev functino function
iabbrev Micahel Michael
iabbrev becuase because
iabbrev taht that
iabbrev wiht with
iabbrev juts just
iabbrev acutal actual
iabbrev si is
iabbrev nto not
iabbrev substitutino substitution
iabbrev transformatino transformation
iabbrev transformatinos transformations
" }}}
" Backups -----------------------------------------------------{{{
set backup        " keep a backup file
set backupdir=~/.vim/backup
set autowrite
" }}}
" UI ----------------------------------------------------------{{{
set history=50      " keep 50 lines of command line history
set ruler           " show the cursor position all the time
set showcmd         " display incomplete commands
set incsearch       " do incremental searching
set ignorecase
set smartcase
set laststatus=2
set number
set hidden
set wildmenu
set wildmode=longest:full,longest
set wildignore+=.git,.svn,local,build,vendor,.sass-cache
set list
set listchars=tab:▸\ ,trail:·,extends:❯,precedes:❮
set splitright

set background=dark
colorscheme base16-default-dark

if has('mouse')
  set mouse=a
endif

if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

function! SyntaxItem()
    return synIDattr(synID(line("."),col("."),1),"name")
endfunction

set statusline=%<%f\ %h%m%r\ %{SyntaxItem()}%=%-14.(%l,%c%V%)\ %P
" }}}
" Folding -----------------------------------------------------{{{
set nofoldenable
set foldlevel=10
augroup folding
    au!
    au BufReadPre * setlocal foldmethod=indent
    au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
augroup END
" }}}
" Global mappings ---------------------------------------------{{{
let mapleader=","
let maplocalleader = '\\'
nnoremap <silent> <leader>s :nohls<CR>
nnoremap q: <Nop>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

nnoremap ; :
nnoremap : ;

" Uppercase last word in insert mode (stolen from Steve Losh).
" Overwrites z mark
inoremap <C-u> <esc>mzgUiw`za


function! ExecCurrentLine()
    let l:curline = getline('.')
    echo ":" . l:curline
    execute l:curline
    sleep 1
    redraw
endfunction

nnoremap <C-x><C-e> :call ExecCurrentLine()<CR>
inoremap <c-c> <esc>
" }}}
" Plugins -----------------------------------------------------{{{
" netrw -------------------------------------------------------{{{
nnoremap <F5> :e .<CR>
let g:netrw_liststyle=3     " tree style

" }}}
" EasyMotion --------------------------------------------------{{{
nmap <leader>f <plug>(easymotion-s)
let g:EasyMotion_smartcase = 1
" }}}
" CtrlP -------------------------------------------------------{{{
" use ack to find known files
" let g:ctrlp_user_command = 'ack -f'
let g:ctrlp_show_hidden = 0
let g:ctrlp_custom_ignore = "*.swp,*.zip,.git/*,build/*,.sass-cache.*,vendor,local,doc,db"
nnoremap <leader>b :CtrlPBuffer<cr>
" }}}
" vim-pandoc---------------------------------------------------{{{
let g:pandoc_use_hard_wraps = 1
let g:pandoc_auto_format = 0
let g:pandoc_no_empty_implicits = 0
let g:pandoc_no_folding = 1
let g:pandoc_no_spans = 1
augroup ft_pandoc
    au!
    au Filetype pandoc setlocal tabstop=2 shiftwidth=2 textwidth=78
augroup END
" }}}
" FixWhitespace------------------------------------------------{{{
function! FixWhitespace()
    let l:save_cursor = getpos(".")
    silent! execute ':%s/\s\+$//'
    call setpos('.', l:save_cursor)
endfunction

augroup trailing
    au!
    au InsertEnter * :set listchars-=trail:·
    au InsertLeave * :set listchars+=trail:·
augroup END

augroup prewrite
    au!
    au BufWritePre * call FixWhitespace()
augroup END
" }}}
" Bufkill -----------------------------------------------------{{{
" Make c-x c-c write and close a buffer (useful for git commit
" edit messages, etc.)
nnoremap <C-x><C-c> :w<bar>BD<cr>
nnoremap <C-x><C-k> :w<bar>BW<cr>
" }}}
" Tagbar ------------------------------------------------------{{{
let g:tagbar_iconchars = ['▸', '▾']
let g:tagbar_phpctags_bin='~/bin/ctags'
let g:tagbar_phpctags_bin='~/bin/phpctags'
hi TagbarVisibilityPublic guifg=#04b404
hi TagbarVisibilityProtected guifg=#0489b1
hi TagbarVisibilityPrivate guifg=#b40404
" }}}
" }}}
" Misc. Filetypes ---------------------------------------------{{{
au BufEnter /private/tmp/crontab.* setl backupcopy=yes
" }}}
" UltiSnips ---------------------------------------------------{{{
let g:UltiSnipsSnippetDirectories = ['UltiSnips']
let g:UltiSnipsSnippetsDir = '~/.vim/bundle/ultisnips/UltiSnips'
let g:UltiSnipsEditSplit = 'horizontal'
" }}}
" LaTeX -------------------------------------------------------{{{

let g:tex_flavor = "latex"

" }}}


" associate unknown files
augroup local_ftdetect
    au!
    au BufNewFile,BufRead *.adoc set filetype=asciidoc      " asciidoc
    au BufNewFile,BufRead *.thtml set filetype=php          " php templates
augroup END

" Scratch buffers ---------------------------------------------{{{
function! CreateOrSwitchToScratchBuffer()
    if buflisted("_scratch") == 0
        badd _scratch
        buffer _scratch
        set buftype=nofile
        set filetype=markdown
        call append(0, '<!-- This is a scratch buffer, set up with ft=markdown -->')
        call append(1, '<!-- You cannot save this file unless you write it somewhere else first -->')
    else
        buffer _scratch
    endif
endfunction

nnoremap <C-x><C-b> :call CreateOrSwitchToScratchBuffer()<CR>
" }}}

" vim:fdm=marker
" vim:set filetype=vim
