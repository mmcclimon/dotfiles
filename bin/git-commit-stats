#!/usr/bin/env python
import argparse
import collections
from datetime import date, datetime
from subprocess import Popen, PIPE


def main():
    ap = argparse.ArgumentParser(
        prog="git-commit-stats",
        epilog="(all other args passed to git log)",
    )

    ap.add_argument(
        "--no-files",
        help="do not show file stats",
        dest="show_files",
        default=True,
        action="store_const",
        const=False,
    )

    args, argv = ap.parse_known_args()
    Stats(args.show_files).run(argv)


class Stats:
    def __init__(self, show_files=True):
        self.show_files = show_files
        self.first = date.max
        self.last = date.min
        self.count = 0
        self.files = collections.defaultdict(lambda: [0, 0])

    def run(self, argv):
        git_args = [
            "git",
            "log",
            "--numstat",
            "--no-merges",
            "--format=COMMIT %ct",
            *argv,
        ]

        with Popen(git_args, stdout=PIPE, encoding="utf-8") as git:
            assert git.stdout is not None

            while line := git.stdout.readline():
                line = line.rstrip("\n")
                if line.startswith("COMMIT"):
                    self.process_commit_header(line)
                else:
                    self.process_stat_line(line)

        self.output_stats()

    def process_commit_header(self, line):
        _, epoch = line.split()
        self.count += 1
        stamp = datetime.fromtimestamp(int(epoch)).date()
        self.first = min(self.first, stamp)
        self.last = max(self.last, stamp)

    def process_stat_line(self, line):
        if not line:
            return

        plus, minus, path = line.split("\t")

        if (plus == "-" or minus == "-") or (plus == "0" and minus == "0"):
            return

        stats = self.files[path]
        stats[0] += int(plus)
        stats[1] += int(minus)

    def output_stats(self):
        if self.show_files:
            for path in sorted(self.files.keys()):
                plus, minus = self.files[path]
                plus = "+" + str(plus)
                minus = "-" + str(minus)
                print(f"{plus:>5} / {minus:>5}  {path}")

            print()

        total_plus = sum(pathstat[0] for pathstat in self.files.values())
        total_minus = sum(pathstat[1] for pathstat in self.files.values())

        avg = (total_plus + total_minus) / self.count

        print(f"{self.count} commits total (+{total_plus}/-{total_minus})")
        print(f"avg of {avg:0.2f} lines diff per commit")

        num_days = (self.last - self.first).days
        cpd = self.count / num_days
        years, days = divmod(num_days, 365)
        dur = f"{pl(years, 'year')}, {pl(days, 'day')}" if years else pl(days, 'day')

        print(
            f"avg of {cpd:0.2f} commits per day,"
            f" from {self.first} to {self.last} ({dur})"
        )


def pl(count, noun):
    if count == 1:
        return f"{count} {noun}"

    return f"{count} {noun}s"


if __name__ == "__main__":
    main()
